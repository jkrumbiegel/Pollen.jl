[{"doctype":"documentation","id":"references/Pollen.fromjson","title":"fromjson","text":""},{"doctype":"documentation","id":"references/Pollen.Position","title":"Position","text":""},{"doctype":"documentation","id":"references/Pollen.JuliaSyntaxFormat","title":"JuliaSyntaxFormat","text":""},{"doctype":"documentation","id":"references/Pollen.servereventhandlers","title":"servereventhandlers","text":""},{"doctype":"documentation","id":"references/Pollen.selectfirst","title":"selectfirst","text":" selectfirst(tree, selector)\n Iterate over nodes in  tree  that match  selector  and return the first one. If no matching node can be found, return  nothing ."},{"doctype":"documentation","id":"references/Pollen.gettext","title":"gettext","text":""},{"doctype":"documentation","id":"references/Pollen.filehandlers","title":"filehandlers","text":""},{"doctype":"documentation","id":"references/Pollen.onsourcefilechanged","title":"onsourcefilechanged","text":""},{"doctype":"documentation","id":"references/Pollen.xtree","title":"xtree","text":""},{"doctype":"documentation","id":"references/Pollen.htmlify","title":"htmlify","text":" htmlify(doc, htmltag = :div)\n If  doc.tag  is not a valid HTML tag, changes it into a :div and adds the attribute :class => doc.tag ."},{"doctype":"documentation","id":"references/Pollen.stopasync","title":"stopasync","text":""},{"doctype":"documentation","id":"references/Pollen.PARSECODE_SELECTOR","title":"PARSECODE_SELECTOR","text":""},{"doctype":"documentation","id":"references/Pollen.rewritedoc","title":"rewritedoc","text":" rewritedoc(rewriter, docid, document) -> document'\n Rewrite  document  with id  docid , returning a rewritten document."},{"doctype":"document","id":"documents/docs/tutorials/setup.md","title":"Creating, writing and publishing package documentation","text":" Creating, writing and publishing package documentation This tutorial will teach you how to create a new Julia package with Pollen.jl documentation to get a site just like the one you are probably reading this on. After reading this, you will have learned how to create a Julia package and set up Pollen as its documentation system, use Pollen’s development server with live reload to preview changes as you make them; and how to publish the package documentation to GitHub Pages You can see the resulting project and its documentation at  lorenzoh/PollenExample . jl . Installation Before starting the tutorial, make sure you’ve followed the  installation instructions for Pollen . jl . Creating a package with Pollen . jl documentation Documentation for an existing package This section describes how to add Pollen documentation when creating a new package. It is also possible to add Pollen.jl documentation to an existing package  as described here . The most commonly used tool for creating new Julia packages is  PkgTemplates . jl . Pollen.jl provides a plugin for PkgTemplates.jl to spare you any arduous setup tasks. To create a template, make sure you have  PkgTemplates  installed and create a template with the Pollen plugin: using   PkgTemplates ,   Pollen \n \n template   =   Template ( plugins = [ \n         Pollen . PollenPlugin ( ) , \n         Tests ( project = true ) , \n         Git ( ssh = true ) , \n         GitHubActions ( ) , \n         #Develop(), \n         ProjectFile ( ) , \n     ] , \n     user = \" lorenzoh \" ,   julia = v \" 1.6 \" ) Following along If you want to follow along and host the tutorial project on GitHub pages, make sure to replace  \"lorenzoh\"  with your GitHub user name. Next, we’ll instantiate the template by calling it with the name of the package we want to create: template ( \" PollenExample \" ) Once this is done, you’ll have a brand new package ready to use Pollen.jl’s documentation system. Writing documentation interactively Now, we’ll work on the documentation and preview it locally. The package files were generated in Julia’s package development directory: using   Pkg \n dir   =   joinpath ( Pkg . devdir ( ) ,   \" PollenExample \" ) We’ll activate the package’s documentation environment so that we can load the created package and Pollen itself, and then start the documentation development server: using   Pkg ;   Pkg . activate ( joinpath ( dir ,   \" docs \" ) ) \n include ( joinpath ( dir ,   \" docs/serve.jl \" ) ) Once you see messages that two servers are running on ports 3000 and 8000, you can click the first link ( http://localhost:3000/dev/i ) to see a preview of the documentation. The first time, we run this, Pollen has to install the frontend, but subsequent runs will be much faster. The opened page should look like this: The landing page shows our package’s  README.md  which, of course, is almost empty! Let’s keep the server running and edit the file, for example by adding some text under the heading. Save the file, return to the documentation web page and  press  R . The page should update with the text you added to the README. For example: Great job! We just updated part of the documentation. While there are a lot more things we could change about the docs at this point, we’ll leave them for another tutorial and get to the last part in this tutorial: publishing our package’s documentation as a website. Publishing the documentation on GitHub Pages If you used the template from the first part of this tutorial, the package directory will already be a git repository. First, we need to make sure to commit the changes we made above: > cd ~/.julia/dev/PollenExample\n> git add .\n> git commit -m \"Modified README\"\n Now, you’ll need to create a GitHub repository at  /$username/PollenExample.jl . If you used your GitHub user in the template above, the local repository’s remote should be set up correctly. Now we’ll push our changes, and also two helper branches that Pollen uses to host a page: > git checkout pollen && git push --set-upstream origin main\n> git checkout gh-pages && git push --set-upstream origin main\n> git checkout main && git push --set-upstream origin main\n"},{"doctype":"documentation","id":"references/Pollen.serve","title":"serve","text":" serve(project)\n"},{"doctype":"documentation","id":"references/Pollen.Updates","title":"Updates","text":" struct Updates\n Tracks updates to project state. Used internally by  runserver ."},{"doctype":"documentation","id":"references/Pollen.resolvesymbol","title":"resolvesymbol","text":""},{"doctype":"documentation","id":"references/Pollen.POLLEN_TEMPLATE_DIR","title":"POLLEN_TEMPLATE_DIR","text":""},{"doctype":"documentation","id":"references/Pollen.insertionindex","title":"insertionindex","text":""},{"doctype":"documentation","id":"references/Pollen.build","title":"build","text":" build(project)\n Build project to a temporary directory with  HTMLFormat  format. build(project, builder[, docs])\n Build every document named in  docs  using  builder .  docs  defaults to  keys(project.sources) , meaning every document will be built. If you only want to rebuild previously built files, use  rebuild ."},{"doctype":"documentation","id":"references/Pollen.setuppollenenv","title":"setuppollenenv","text":""},{"doctype":"documentation","id":"references/Pollen.ExecuteCode","title":"ExecuteCode","text":""},{"doctype":"documentation","id":"references/Pollen.PackageDocumentation","title":"PackageDocumentation","text":" PackageDocumentation(modules) <: Rewriter\n This rewriter sets up tables of a modules’ symbols and source files. Each reference can be its own document, with metadata for that symbol stored in its attributes and the docstring stored as a child X-tree. It exports all symbols with metadata relevant to what kind of a symbol it is, e.g. method data for a function. The source files are gathered from the module info, and are new document type."},{"doctype":"documentation","id":"references/Pollen.israwtext","title":"israwtext","text":""},{"doctype":"documentation","id":"references/Pollen.@pack_PollenPlugin","title":"@pack_PollenPlugin","text":""},{"doctype":"documentation","id":"references/Pollen.frontend_loaded","title":"frontend_loaded","text":""},{"doctype":"documentation","id":"references/Pollen._findreferences","title":"_findreferences","text":""},{"doctype":"documentation","id":"references/Pollen.LoadFrontendConfig","title":"LoadFrontendConfig","text":""},{"doctype":"documentation","id":"references/Pollen.Rewriter","title":"Rewriter","text":" abstract type Rewriter\n Pluggable extension to a [ Project ] with hooks to transform individual documents, create new documents, register file update handlers and perform additional build steps. See the following methods: rewritedoc  is applied to every source document and returns a modified document that is passed to the next rewriter. createsources!  allow rewriters to create new source documents reset! postbuild getfilehandlers"},{"doctype":"documentation","id":"references/Pollen.frontend_serve","title":"frontend_serve","text":""},{"doctype":"documentation","id":"references/Pollen.SearchIndex","title":"SearchIndex","text":""},{"doctype":"documentation","id":"references/Pollen.SelectAll","title":"SelectAll","text":" SelectAll() <: Selector\n Selects every node and leaf."},{"doctype":"documentation","id":"references/Pollen.addidentifierreferences","title":"addidentifierreferences","text":""},{"doctype":"documentation","id":"references/Pollen.buildtofile","title":"buildtofile","text":""},{"doctype":"documentation","id":"references/Pollen.mdchildrenattrs","title":"mdchildrenattrs","text":""},{"doctype":"documentation","id":"references/Pollen.PUBLISH_CODEBLOCK_SELECTOR","title":"PUBLISH_CODEBLOCK_SELECTOR","text":""},{"doctype":"documentation","id":"references/Pollen.FirstChild","title":"FirstChild","text":""},{"doctype":"documentation","id":"references/Pollen.issymbolref","title":"issymbolref","text":""},{"doctype":"document","id":"documents/docs/howto/install.md","title":"How to install Pollen.jl","text":" How to install Pollen . jl Pollen.jl is a package for the Julia programming language and can be installed like other packages using the built-in package managero In development Since Pollen.jl is not yet released and has some unreleased package dependencies, you’ll have to install these directly from their repositories for now as shown below. Run the following in a Julia session to install Pollen and its dependencies: using   Pkg \n \n Pkg . add ( [ \n     Pkg . PackageSpec ( url = \" https://github.com/c42f/JuliaSyntax.jl \" ) , \n     Pkg . PackageSpec ( url = \" https://github.com/lorenzoh/ModuleInfo.jl \" ) , \n     Pkg . PackageSpec ( url = \" https://github.com/lorenzoh/Pollen.jl \" ,   rev = \" main \" ) , \n ] )"},{"doctype":"documentation","id":"references/Pollen.withtag","title":"withtag","text":""},{"doctype":"documentation","id":"references/Pollen._iterpaths","title":"_iterpaths","text":""},{"doctype":"documentation","id":"references/Pollen.ChangeLinkExtension","title":"ChangeLinkExtension","text":""},{"doctype":"documentation","id":"references/Pollen.splitoncomments","title":"splitoncomments","text":""},{"doctype":"documentation","id":"references/Pollen.applyupdates!","title":"applyupdates!","text":" applyupdates!(project, builder, updates::Updates)\n Apply  updates  to a project by updating sources, rewriting and building documents."},{"doctype":"documentation","id":"references/Pollen.mdchildren","title":"mdchildren","text":""},{"doctype":"documentation","id":"references/Pollen.initialize","title":"initialize","text":""},{"doctype":"documentation","id":"references/Pollen.##InlineTest-01b48f5c342f65df7fcd07f28f0d2cacbb09f0a0.__init__","title":"__init__","text":""},{"doctype":"documentation","id":"references/Pollen.SelectAnd","title":"SelectAnd","text":""},{"doctype":"documentation","id":"references/Pollen.PackageWatcher","title":"PackageWatcher","text":" PackageWatcher(modules) <: Rewriter\n Rebuild when a source file in one of  modules  changes."},{"doctype":"documentation","id":"references/Pollen.RunCache","title":"RunCache","text":""},{"doctype":"documentation","id":"references/Pollen.Builder","title":"Builder","text":""},{"doctype":"documentation","id":"references/Pollen.SelectAttrEq","title":"SelectAttrEq","text":" SelectAttrEq(name, value)\n Selects nodes with  attributes(node)[name] == val ."},{"doctype":"documentation","id":"references/Pollen._runsafe","title":"_runsafe","text":""},{"doctype":"documentation","id":"references/Pollen._getpath","title":"_getpath","text":""},{"doctype":"documentation","id":"references/Pollen.reset!","title":"reset!","text":" reset!(rewriter)\n Clears internal state of  rewriter . Does nothing if not overwritten."},{"doctype":"documentation","id":"references/Pollen.runblock","title":"runblock","text":""},{"doctype":"documentation","id":"references/Pollen.IMAGEMIMES","title":"IMAGEMIMES","text":""},{"doctype":"documentation","id":"references/Pollen.insertfirst","title":"insertfirst","text":""},{"doctype":"documentation","id":"references/Pollen.frontend_install","title":"frontend_install","text":""},{"doctype":"documentation","id":"references/Pollen.addid","title":"addid","text":""},{"doctype":"documentation","id":"references/Pollen.catafirst","title":"catafirst","text":""},{"doctype":"documentation","id":"references/Pollen.MIMES","title":"MIMES","text":""},{"doctype":"documentation","id":"references/Pollen._parsecelloutputs","title":"_parsecelloutputs","text":""},{"doctype":"documentation","id":"references/Pollen.stripdocstrings","title":"stripdocstrings","text":""},{"doctype":"documentation","id":"references/Pollen.attributes","title":"attributes","text":""},{"doctype":"documentation","id":"references/Pollen.HTML_MIMES","title":"HTML_MIMES","text":""},{"doctype":"documentation","id":"references/Pollen.lunr_document","title":"lunr_document","text":""},{"doctype":"documentation","id":"references/Pollen.createfilewatcher","title":"createfilewatcher","text":" createfilewatcher(documents, channel)\n Create a file watcher that can be used as an event source when serving. documents  is a  Dict  with entries  filepath => docid ."},{"doctype":"documentation","id":"references/Pollen.DocumentFolder","title":"DocumentFolder","text":" DocumentFolder(dir) <: Rewriter\n Rewriter to add source documents from a folder to a project. For every file  $dir/$subpath , a new source document with id  $subpath is added to a project. Keyword arguments prefix = nothing : Prefix for document ids. If a string is given document ids will have the form  $prefix$subpath extensions = (\"ipynb\", \"md\") : List of file extensions that should be loaded. includehidden = false : Whether to load documents from hidden files and directories. filterfn = p -> true : Filter applied to every path. Return  false  for a path to not load it."},{"doctype":"documentation","id":"references/Pollen.ChangeTag","title":"ChangeTag","text":""},{"doctype":"documentation","id":"references/Pollen.withext","title":"withext","text":""},{"doctype":"document","id":"documents/README.md","title":"Pollen.jl","text":" Pollen . jl A document generation system based on tree rewriting built for interactive work. Note : The documentation for this package is still very much a work in progress. However, Pollen.jl already powers the documentation of some packages like  FastAI . jl . Getting started First, find out  how to install Pollen  and then start by using it to document your own Julia package. Features format-agnostic document representation use Markdown, Julia files and Jupyter notebooks as input documents incremental, live reload; only rebuilds what you changed code execution automatic references pluggable extension system; only use the features you want"},{"doctype":"documentation","id":"references/Pollen.addbuild!","title":"addbuild!","text":""},{"doctype":"documentation","id":"references/Pollen._strip_comment","title":"_strip_comment","text":""},{"doctype":"documentation","id":"references/Pollen.HTMLify","title":"HTMLify","text":""},{"doctype":"documentation","id":"references/Pollen._tokenname","title":"_tokenname","text":""},{"doctype":"documentation","id":"references/Pollen.NthChild","title":"NthChild","text":""},{"doctype":"documentation","id":"references/Pollen.MarkdownFormat","title":"MarkdownFormat","text":" MarkdownFormat([parser]) <: Format\n Format for reading CommonMark-compliant Markdown. See CommonMark . jl for a reference."},{"doctype":"documentation","id":"references/Pollen.ServeFiles","title":"ServeFiles","text":""},{"doctype":"documentation","id":"references/Pollen.htmlstr","title":"htmlstr","text":""},{"doctype":"documentation","id":"references/Pollen.##InlineTest-01b48f5c342f65df7fcd07f28f0d2cacbb09f0a0.TESTSET_MACROS","title":"TESTSET_MACROS","text":""},{"doctype":"documentation","id":"references/Pollen.SelectTag","title":"SelectTag","text":""},{"doctype":"documentation","id":"references/Pollen.RE_HREF","title":"RE_HREF","text":""},{"doctype":"documentation","id":"references/Pollen._getdocid","title":"_getdocid","text":""},{"doctype":"documentation","id":"references/Pollen.SourceFileUpdated","title":"SourceFileUpdated","text":""},{"doctype":"documentation","id":"references/Pollen.Before","title":"Before","text":""},{"doctype":"documentation","id":"references/Pollen.render!","title":"render!","text":""},{"doctype":"documentation","id":"references/Pollen.cata","title":"cata","text":" cata(f, tree)\n Transform every node in  tree  with function  f . cata(f, tree, selector)\n Transform nodes matching  selector  with function  f ."},{"doctype":"documentation","id":"references/Pollen.Event","title":"Event","text":" abstract type Event\n An event that can during an interactive serving of a project using a  Server . Can be created by a  ServerMode  or a Rewriter ."},{"doctype":"documentation","id":"references/Pollen.loaddefaults","title":"loaddefaults","text":""},{"doctype":"documentation","id":"references/Pollen.formatcodeblock","title":"formatcodeblock","text":""},{"doctype":"documentation","id":"references/Pollen.ServerMode","title":"ServerMode","text":" abstract type ServerMode\n Mode that a  Server  can run in. Controls how events affect the project state."},{"doctype":"documentation","id":"references/Pollen.BLOCK_TO_TAG","title":"BLOCK_TO_TAG","text":""},{"doctype":"documentation","id":"references/Pollen.FormatCode","title":"FormatCode","text":""},{"doctype":"documentation","id":"references/Pollen.XTree","title":"XTree","text":""},{"doctype":"documentation","id":"references/Pollen.stringrange","title":"stringrange","text":""},{"doctype":"documentation","id":"references/Pollen.frontmatter","title":"frontmatter","text":""},{"doctype":"documentation","id":"references/Pollen.catafold","title":"catafold","text":" catafold(f, xtree, state)\n Fold a function  f : (node, state) -> (node', state')  post-order over  xtree  and return a modified tree as well as the resulting state. Use  cata  for a stateless catamorphism and  fold  if you don’t want to transform  xtree ."},{"doctype":"documentation","id":"references/Pollen.InlineIOContext","title":"InlineIOContext","text":""},{"doctype":"documentation","id":"references/Pollen._ishidden","title":"_ishidden","text":""},{"doctype":"documentation","id":"references/Pollen.PollenPlugin","title":"PollenPlugin","text":" PollenPlugin() <: Plugin\n Sets up Pollen.jl documentation for a package. Extended Performs the following steps: creates a  docs/  folder with default files  project.jl ,  serve.jl ,  make.jl and  toc.json creates the GitHub actions for building the documentation data and the frontend creates an empty (orphan) branch “pollen” where documentation data will be built to by GitHub Actions"},{"doctype":"documentation","id":"references/Pollen._lazyservecallback","title":"_lazyservecallback","text":""},{"doctype":"documentation","id":"references/Pollen.geteventhandler","title":"geteventhandler","text":" geteventhandler\n"},{"doctype":"documentation","id":"references/Pollen.select","title":"select","text":" select(tree, selector)\n Iterate over nodes in  tree  that match  selector . Call  collect  on the iterator to get a vector of results. Examples using   Pollen \n node   =   Node ( : document ,   \" Title \" ,   Node ( : p ,   \" Hello  \" ,   \" there. \" ) ) \n select ( node ,   Pollen . SelectLeaf ( ) )   |>   collect"},{"doctype":"documentation","id":"references/Pollen.replacefirst","title":"replacefirst","text":""},{"doctype":"documentation","id":"references/Pollen.DocUpdated","title":"DocUpdated","text":""},{"doctype":"documentation","id":"references/Pollen.withchildren","title":"withchildren","text":""},{"doctype":"documentation","id":"references/Pollen.preparesourcefile","title":"preparesourcefile","text":""},{"doctype":"documentation","id":"references/Pollen.HTMLRedirect","title":"HTMLRedirect","text":""},{"doctype":"documentation","id":"references/Pollen.PreRendered","title":"PreRendered","text":""},{"doctype":"documentation","id":"references/Pollen.SaveAttributes","title":"SaveAttributes","text":""},{"doctype":"documentation","id":"references/Pollen.executegrouped!","title":"executegrouped!","text":""},{"doctype":"documentation","id":"references/Pollen.matches","title":"matches","text":""},{"doctype":"documentation","id":"references/Pollen.runserver","title":"runserver","text":" runserver(server, mode)\n Run a  server  in  mode . Handles start and cleanup of event sources from rewriters and  mode . Synchronizes updates to project state."},{"doctype":"documentation","id":"references/Pollen.referencedata","title":"referencedata","text":""},{"doctype":"documentation","id":"references/Pollen.start","title":"start","text":" start(eventhandler)\n Start an event source. Use  startasync  to do this asynchronously."},{"doctype":"documentation","id":"references/Pollen.nodehref","title":"nodehref","text":""},{"doctype":"documentation","id":"references/Pollen.prerender","title":"prerender","text":""},{"doctype":"documentation","id":"references/Pollen.isshortidentifier","title":"isshortidentifier","text":""},{"doctype":"documentation","id":"references/Pollen.SelectReference","title":"SelectReference","text":""},{"doctype":"documentation","id":"references/Pollen.SelectNode","title":"SelectNode","text":" SelectNode() <: Selector\n Selects every  Node ."},{"doctype":"documentation","id":"references/Pollen.CSSLINKSELECTOR","title":"CSSLINKSELECTOR","text":""},{"doctype":"documentation","id":"references/Pollen.replace","title":"replace","text":""},{"doctype":"documentation","id":"references/Pollen.Format","title":"Format","text":" abstract type Format\n A  Format  describes a content format that trees can be read from and/or trees can be converted to. Extending A  Format   F  can implement the following methods: parse (::IO, ::F )::XTree` reads a tree render! (::IO, ::XTree, ::F  writes a tree"},{"doctype":"documentation","id":"references/Pollen.HTMLFormatTAGS","title":"HTMLFormatTAGS","text":""},{"doctype":"documentation","id":"references/Pollen.DocRequested","title":"DocRequested","text":""},{"doctype":"documentation","id":"references/Pollen.creategroupid","title":"creategroupid","text":""},{"doctype":"documentation","id":"references/Pollen.rewritedocs","title":"rewritedocs","text":" rewritedocs(sources, rewriters) -> outputs\n Applies  rewriters  to a collection of  sources ."},{"doctype":"documentation","id":"references/Pollen.SelectNot","title":"SelectNot","text":" SelectNot(selector)\n Inverts a selector. Use  !selector  as a shorthand, e.g.  !SelectTag(:div) ."},{"doctype":"documentation","id":"references/Pollen._withbranch","title":"_withbranch","text":""},{"doctype":"documentation","id":"references/Pollen.childrenxtrees","title":"childrenxtrees","text":""},{"doctype":"documentation","id":"references/Pollen.runtests","title":"runtests","text":""},{"doctype":"documentation","id":"references/Pollen.parsejupytercell","title":"parsejupytercell","text":""},{"doctype":"documentation","id":"references/Pollen.Selector","title":"Selector","text":" abstract type Selector\n A  Selector  matches a node in an  XTree . Selectors can be passed to  select ,  selectfirst ,  cata . See  subtypes(Selector)  for example selectors. Extending To implement a  Selector : write a  struct MySelector <: Selector implement a method  Pollen.matches(::MySelector, ::XTree)::Bool"},{"doctype":"documentation","id":"references/Pollen.SelectHasAttr","title":"SelectHasAttr","text":" SelectHasAttr(name)\n Selects nodes that have an attribute  name ."},{"doctype":"documentation","id":"references/Pollen.Server","title":"Server","text":" Server(project, builder)\n A server manages interactively running a  Project , coordinating events to update project state efficiently."},{"doctype":"documentation","id":"references/Pollen.changehrefextension","title":"changehrefextension","text":""},{"doctype":"documentation","id":"references/Pollen._getmethods","title":"_getmethods","text":""},{"doctype":"documentation","id":"references/Pollen.defaulttoc","title":"defaulttoc","text":""},{"doctype":"documentation","id":"references/Pollen.tag","title":"tag","text":""},{"doctype":"documentation","id":"references/Pollen.createsourcefiledoc","title":"createsourcefiledoc","text":""},{"doctype":"documentation","id":"references/Pollen.FileBuilder","title":"FileBuilder","text":" struct FileBuilder <: Builder\n Build every document to a file in  dir  using output  format ."},{"doctype":"documentation","id":"references/Pollen.asmimestrings","title":"asmimestrings","text":""},{"doctype":"documentation","id":"references/Pollen._closestindex","title":"_closestindex","text":""},{"doctype":"documentation","id":"references/Pollen.ServeFilesLazy","title":"ServeFilesLazy","text":""},{"doctype":"documentation","id":"references/Pollen.withattributes","title":"withattributes","text":""},{"doctype":"documentation","id":"references/Pollen","title":"Pollen","text":""},{"doctype":"documentation","id":"references/Pollen.root","title":"root","text":""},{"doctype":"documentation","id":"references/Pollen.ParseCode","title":"ParseCode","text":""},{"doctype":"documentation","id":"references/Pollen.changelinkextension","title":"changelinkextension","text":""},{"doctype":"documentation","id":"references/Pollen.@unpack_PollenPlugin","title":"@unpack_PollenPlugin","text":""},{"doctype":"documentation","id":"references/Pollen.addrewrite!","title":"addrewrite!","text":""},{"doctype":"documentation","id":"references/Pollen.replacemany","title":"replacemany","text":""},{"doctype":"documentation","id":"references/Pollen._hasbranch","title":"_hasbranch","text":""},{"doctype":"documentation","id":"references/Pollen.asmimestring","title":"asmimestring","text":""},{"doctype":"documentation","id":"references/Pollen.RelativeLinks","title":"RelativeLinks","text":""},{"doctype":"documentation","id":"references/Pollen.foldleaves","title":"foldleaves","text":" fold(f, tree)\n Fold over all leaves in  tree  in post-order iteration. Examples node   =   Node ( : table ,   Node ( : row ,   10 ,   10 ) ,   Node ( : row ,   10 ,   10 ) ) \n Pollen . foldleaves ( ( x ,   leaf )   ->   x   +   leaf [ ] ,   node ,   0 )"},{"doctype":"documentation","id":"references/Pollen.handle","title":"handle","text":" handle(server, mode, event)\nhandle(rewriter, event)\n"},{"doctype":"documentation","id":"references/Pollen.rewriteoutputs!","title":"rewriteoutputs!","text":""},{"doctype":"documentation","id":"references/Pollen.loadfile","title":"loadfile","text":""},{"doctype":"documentation","id":"references/Pollen.AddID","title":"AddID","text":" AddID(selector = sel\"h2, h3, h4\"; idfn)\n Replacer  that adds an  id  attribute to every x-expression selected by  selector . It assumes that its first child is a  String . The id is created by applying  idfn  to that string.  idfn  defaults to  CommonMark.slugify ."},{"doctype":"documentation","id":"references/Pollen.##InlineTest-01b48f5c342f65df7fcd07f28f0d2cacbb09f0a0.tests","title":"tests","text":""},{"doctype":"documentation","id":"references/Pollen.stop","title":"stop","text":""},{"doctype":"documentation","id":"references/Pollen.SEL_H234","title":"SEL_H234","text":""},{"doctype":"documentation","id":"references/Pollen.rewritesources!","title":"rewritesources!","text":" rewritesources!(project, docids) -> rewritten_docids\n Rewrite source documents named by  docids  as well as new source documents recursively created by rewriters. Return a list of all rewritten document ids."},{"doctype":"documentation","id":"references/Pollen.DocRebuilt","title":"DocRebuilt","text":""},{"doctype":"documentation","id":"references/Pollen.runblockscached","title":"runblockscached","text":""},{"doctype":"documentation","id":"references/Pollen.startasync","title":"startasync","text":""},{"doctype":"documentation","id":"references/Pollen.createsources!","title":"createsources!","text":" createsources!(rewriters) -> sources\n Creates new source documents from  rewriters"},{"doctype":"documentation","id":"references/Pollen.DocumentGraph","title":"DocumentGraph","text":""},{"doctype":"documentation","id":"references/Pollen.FileServer","title":"FileServer","text":""},{"doctype":"documentation","id":"references/Pollen.HTMLFormat","title":"HTMLFormat","text":""},{"doctype":"documentation","id":"references/Pollen.JupyterFormat","title":"JupyterFormat","text":" JupyterFormat() <: Format\n Format for reading in Jupyter notebook (.ipynb) files. Extended help Markdown cells are parsed as  :md   Node s using  MarkdownFormat . Parsd code cells have the following structure: Node(:codecell,\n    Node(:codeblock, _)  # source code\n    Node(:codeoutput, _)  # printed output\n    Node(:coderesult, _)  # return value of cell\n)"},{"doctype":"documentation","id":"references/Pollen._xtree","title":"_xtree","text":""},{"doctype":"documentation","id":"references/Pollen.SelectDocumentReference","title":"SelectDocumentReference","text":""},{"doctype":"documentation","id":"references/Pollen.isurlref","title":"isurlref","text":""},{"doctype":"documentation","id":"references/Pollen.Replacer","title":"Replacer","text":""},{"doctype":"documentation","id":"references/Pollen.postbuild","title":"postbuild","text":" postbuild(rewriter, project, dst, format)\n Post-build callback for  Rewriter s."},{"doctype":"documentation","id":"references/Pollen.git","title":"git","text":""},{"doctype":"documentation","id":"references/Pollen._insert","title":"_insert","text":""},{"doctype":"document","id":"documents/docs/howto/setup.md","title":"How to set up package documentation","text":" How to set up package documentation How-to for setting up Pollen.jl documentation for packages. See  the tutorial  for a more in-depth look. Pollen.jl comes with a  PkgTemplates . jl  template that performs necessary setup steps to add Pollen documentation to a new package you’re creating. To use it, add  Pollen.PollenPlugin  to the list of plugins when constructing a package template, and call it to create a package: using   Pollen ,   PkgTemplates \n \n template   =   Template ( plugins = [ \n         Pollen . PollenPlugin ( ) , \n         PkgTemplates . Tests ( project = true ) , \n         PkgTemplates . Git ( ssh = true ) , \n         GitHubActions ( ) , \n     ] ,   user = \" username \" ) \n \n template ( \" PackageName \" ) Setting up Pollen . jl documentation for an existing package If you want to add Pollen documentation to an existing package, make sure to remove any Documenter.jl-specific files, e.g. by renaming the existing “docs/” folder. You can then call the plugin manually: using   Pollen ,   PkgTemplates \n \n \n function   setuppollen ( pkgdir ) \n     plugin   =   Pollen . PollenPlugin ( ) \n     t   =   Template ( plugins = [ plugin ] ,   user = \" mock \" ) \n     PkgTemplates . validate ( plugin ,   t ) \n     PkgTemplates . prehook ( plugin ,   t ,   pkgdir ) \n     PkgTemplates . hook ( plugin ,   t ,   pkgdir ) \n     PkgTemplates . posthook ( plugin ,   t ,   pkgdir ) \n end"},{"doctype":"documentation","id":"references/Pollen.SelectOr","title":"SelectOr","text":""},{"doctype":"documentation","id":"references/Pollen.adapthtmlstr","title":"adapthtmlstr","text":""},{"doctype":"documentation","id":"references/Pollen.render","title":"render","text":""},{"doctype":"documentation","id":"references/Pollen.After","title":"After","text":""},{"doctype":"documentation","id":"references/Pollen.StaticResources","title":"StaticResources","text":""},{"doctype":"documentation","id":"references/Pollen.addlinkreferences","title":"addlinkreferences","text":""},{"doctype":"documentation","id":"references/Pollen.Node","title":"Node","text":" Node(tag, children...; attributes...)\n A non-leaf node in an  XTree . It has a tag, can hold a number of children nodes and key-value attributes. You can access and modify these using tag  and  withtag children  and  withchildren attributes  and  withattributes Examples Node ( : paragraph , \n     \" I am a sentence \" ,   \" This one is short \" ; \n     class   =   \" tight \" ) \n \n # Equivalently \n Node ( : paragraph , \n     [ \" I am a sentence \" ,   \" This one is short \" ] , \n     Dict ( : class   =>   \" tight \" ) )"},{"doctype":"documentation","id":"references/Pollen.rebuild","title":"rebuild","text":" rebuild(project, builder)\n Build previously built documents in projects using  builder . Equivalent to build(project, builder, keys(project.outputs)) ."},{"doctype":"documentation","id":"references/Pollen.formatextension","title":"formatextension","text":""},{"doctype":"documentation","id":"references/Pollen.Leaf","title":"Leaf","text":" Leaf(value) <: XTree\n A leaf node in an  XTree . It holds a single value."},{"doctype":"documentation","id":"references/Pollen._addrefedges!","title":"_addrefedges!","text":""},{"doctype":"documentation","id":"references/Pollen.createtitle","title":"createtitle","text":""},{"doctype":"documentation","id":"references/Pollen.default_md_parser","title":"default_md_parser","text":""},{"doctype":"documentation","id":"references/Pollen._documentgraph","title":"_documentgraph","text":""},{"doctype":"documentation","id":"references/Pollen.SelectSymbolReference","title":"SelectSymbolReference","text":""},{"doctype":"documentation","id":"references/Pollen.JSONFormat","title":"JSONFormat","text":" JSONFormat() <: Format\n Format for reading and writing trees from and to JSON. Trees nodes are encoded as JSON objects: julia> render(Node(:p, \"Hello\", nothing), JSONFormat()) |> println\n\n{\"attributes\":{},\"tag\":\"p\",\"children\":[\"Hello\", null]}\n Encoding to JSON is lossless only when leaf and attribute values are valid JSON types. Richer leaf values will be converted to a dictionary of MIME type representations to allow serialization and rich display upon deserialization."},{"doctype":"documentation","id":"references/Pollen.fold","title":"fold","text":" fold(f, tree)\n Fold over tree in post-order iteration. Examples node   =   Node ( : table ,   Node ( : row ,   10 ,   10 ) ,   Node ( : row ,   10 ,   10 ) ) \n Pollen . fold ( node ,   0 )   do   x ,   subtree \n     subtree   isa   Leaf { Int }   ?   x   +   subtree [ ]   :   x \n end"},{"doctype":"documentation","id":"references/Pollen.SelectCondition","title":"SelectCondition","text":" SelectCondition(f) <: Selector\n Selects all nodes or leaves for which function  f  returns  true ."},{"doctype":"documentation","id":"references/Pollen.Project","title":"Project","text":" Project(rewriters)\n A project manages the loading, parsing and rewriting of a set of documents."},{"doctype":"documentation","id":"references/Pollen.insert","title":"insert","text":""},{"doctype":"documentation","id":"references/Pollen.parse","title":"parse","text":" parse(io, format)\nparse(path, format)\nparse(str, format)\n Parse source in  format  into a tree. Input can come from an  io::IO  or a string  str . parse(path)\n Parse source in  AbstractPath   path  into a tree.  extensionformat is used to find the correct  Format  to use."},{"doctype":"documentation","id":"references/Pollen.extensionformat","title":"extensionformat","text":" extensionformat(Val(Symbol(ext)))\n Define a default  Format  for parsing files with extension  ext . For example  extensionformat(Val(:html)) == HTMLFormat() , so  parse(p\"index.html\") dispatches to  parse(p\"index.html\", HTMLFormat())"},{"doctype":"documentation","id":"references/Pollen._createorphanbranch","title":"_createorphanbranch","text":""},{"doctype":"documentation","id":"references/Pollen.addsource!","title":"addsource!","text":""},{"doctype":"documentation","id":"references/Pollen.tojson","title":"tojson","text":" tojson(::JSONFormat, tree)\n Convert a  tree  into a JSON-compatible representation, i.e. one that only uses JSON datatypes ( Dict ,  String ,  Number ,  Nothing )."},{"doctype":"documentation","id":"references/Pollen.SelectLeaf","title":"SelectLeaf","text":""},{"doctype":"documentation","id":"references/Pollen.SEL_H1234","title":"SEL_H1234","text":""},{"doctype":"documentation","id":"references/Pollen.backlinkdata","title":"backlinkdata","text":""},{"doctype":"documentation","id":"references/Pollen.linktoreference","title":"linktoreference","text":""},{"doctype":"documentation","id":"references/Pollen.ANSI","title":"ANSI","text":" ANSI(x)\n Wraps a value with rich text display and adds an HTML display that converts the ANSI escape sequences to valid HTML."},{"doctype":"documentation","id":"references/Pollen.hasrichdisplay","title":"hasrichdisplay","text":""},{"doctype":"documentation","id":"references/Pollen.fullbuild","title":"fullbuild","text":""}]